Exercise 1: Initializing a Git Repository
1. Open a terminal and navigate to your desired project directory.
2. Use the `git init` command to create a new Git repository in that directory.
Initialized empty Git repository in /workspaces/lab-4-git-commands/newgitreposotiry/.git/
3. Verify that the repository has been created successfully. Use the `git status` command to check the status of your repository.
4. How do you know it has initialized sucessfully?
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    example.txt
        modified:   lab-4-git-commands.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        newgitreposotiry/

no changes added to commit (use "git add" and/or "git commit -a")

Exercise 2: Tracking Changes
1. Create a new text file (e.g., "example.txt") in your repository.
2. Use `git status` to see the status of your repository. What does it show?
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        example.txt

nothing added to commit but untracked files present (use "git add" to track)
3. Use `git add` to stage the "example.txt" file for a commit.
4. Check the status again using `git status`. What's the difference now?
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   example.txt


Exercise 3: Making a Commit
1. Use `git commit` to create a commit with the staged changes. Don't forget to provide a meaningful commit message.
[main (root-commit) 5bae4fe] part 3
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 example.txt
2. Use `git status` to check the status of your repository once more. What does it show now?
On branch main
nothing to commit, working tree clean

Exercise 4: Viewing Commit History
1. Use `git log` to view the commit history of your repository. This will display a list of commits, including the commit message, author, date, and a unique commit hash.
Author: Josefa Carreto <73377746+josefacarreto@users.noreply.github.com>
Date:   Mon Nov 6 23:35:22 2023 +0000

    part 3
2. Try adding the `--oneline` option to `git log` to display a more concise version of the commit history.
5bae4fe (HEAD -> main) part 3

Exercise 5: Making More Changes
1. Make additional changes to the "example.txt" file.
2. Use `git status` to see the status of your repository. Are the changes detected?
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   example.txt

no changes added to commit (use "git add" and/or "git commit -a")
3. Use `git add` to stage the new changes.
4. Create a new commit with the staged changes using `git commit`.
[main 32a477f] part4
 1 file changed, 1 insertion(+)
Exercise 6: Reviewing Commit History
1. Use `git log` to view the updated commit history. You should now see the new commits you made.
Paste them here:
Author: Josefa Carreto <73377746+josefacarreto@users.noreply.github.com>
Date:   Mon Nov 6 23:50:03 2023 +0000

    part4

commit 5bae4fe4758517f96c2225f0c28efe269463e35a
Author: Josefa Carreto <73377746+josefacarreto@users.noreply.github.com>
Date:   Mon Nov 6 23:35:22 2023 +0000

    part 3